@page "/game-lobby/tic-tac-toe/{id}"
@inject NavigationManager navManager
@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<div class="pixelPageBack">
    <div style="background:radial-gradient(circle, rgba(0,212,255,0) 10%, rgba(255,255,255,0.6) 100%); height:100%" class="p-5 pt-3">
        <PageTitle>Games lobby</PageTitle>
        <AuthorizeView>
            <Authorized>
                @if (currentLobby != null)
                {
                    if (gameState == GameState.Started)
                    {
                        <div class="d-flex justify-content-center">
                            <h1 class="pixelTextMain m-1" style="color:#e42239;">@currentLobby.Owner.Username</h1>
                            <h2 class="pixelTextMain m-2">vs</h2>
                            <h1 class="pixelTextMain m-1" style="color:#3d22e4;">@currentLobby.Opponent.Username</h1>
                        </div>

                        <div class="d-flex justify-content-center">
                            @for (int y = 0; y < ticTacToeGame.FIELD_HEIGHT; y++)
                            {
                                <div class="justify-content-center">
                                    @for (int x = 0; x < ticTacToeGame.FIELD_WIDTH; x++)
                                    {
                                        int sY = y, sX = x;
                                        string img = "css/images/" + (ticTacToeGame[x, y] == 1 ? "cross.png" : ticTacToeGame[x, y] == 10 ? "nought.png" : "empty.png");
                                        <div class="box ttt-box m-2" style="min-width:100px;max-width:200px;" @onclick="(e)=>{MakeGameMove(e,sX,sY);}"><img class="box-img" src="@img" /></div>
                                    }
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                    <h2 class="pixelTextMain">Waiting for opponents...</h2>
                    }
                }
                else
                {
                    <h2 class="pixelTextMain text-center mt-4">Lobby already full!</h2>
                }
            </Authorized>
            <NotAuthorized>
                <h2 class="pixelTextMain text-center mt-4">How da hell u got here?</h2>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject] HubConnection? hubConnection { get; set; }

    private GameLobbyModel currentLobby;
    private UserConnection user;
    public ChatModel chat;

    public TicTacToeGameModel ticTacToeGame { get; private set; }

    private bool isOpened = true;
    public GameState gameState { get; set; }
    private static bool preloaded = true;

    protected override async Task OnInitializedAsync()
    {
        chat = new ChatModel();
        ticTacToeGame = new TicTacToeGameModel();
        ticTacToeGame.OnCrossWin += (line) =>
        {
            jsRuntime.InvokeVoidAsync("alert", "You won!");
        };
        ticTacToeGame.OnNoughtWin += (line) =>
        {
            jsRuntime.InvokeVoidAsync("alert", "You lost!");
        };
        ticTacToeGame.OnDraw += () =>
        {
            jsRuntime.InvokeVoidAsync("alert", "Its a DRAW!");
        };

        preloaded = true;
        gameState = GameState.WaitingForOpponent;
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            user = new UserConnection(authState.User.Claims.First(x => x.Type == ClaimTypes.UserData).Value)
                {
                    Username = authState.User.Identity.Name,
                };
            currentLobby = new GameLobbyModel(Id)
                {
                    Owner = user,
                    Game = GameType.TicTacToe,
                };
            if (hubConnection != null)
            {
                //даю инфу о своём лобби
                hubConnection.On<string>("GetOwnLobby", async (dest) =>
                {
                    if (currentLobby != null)
                        if (currentLobby.Owner.Id == user.Id && isOpened)
                        {
                            await hubConnection.SendAsync("GiveHimLobby", currentLobby, dest);
                        }
                });

                //говорю инфу о лобби подключенному
                hubConnection.On<UserConnection, string>("OpponentAskForLobbyData", async (dest, destId) =>
                {
                    await InvokeAsync(async () =>
                    {
                        if (currentLobby != null)
                            if (currentLobby.Owner.Id == user.Id && isOpened)
                            {
                                currentLobby.Opponent = dest;
                                await hubConnection.SendAsync("SendLobbyDataResponse", destId, currentLobby);
                                isOpened = false;
                                gameState = GameState.Started;
                                StateHasChanged();
                            }
                    });
                });

                //закрытие лобби
                hubConnection.On<GameLobbyModel>("LobbyJustClosed", async (lobby) =>
                {
                    if (currentLobby != null)
                    {
                        if (lobby.Id == currentLobby.Id)
                        {
                            if (preloaded)
                            {
                                await jsRuntime.InvokeVoidAsync("alert", "Opponent disconnected!");
                                preloaded = false;
                            }
                            navManager.NavigateTo("/game-lobby");
                        }
                    }
                });

                //общение ходами
                hubConnection.On<int, int, bool>("RecieveMove", async (x, y, isCross) =>
                {
                    await InvokeAsync(() =>
                    {
                        if (currentLobby != null)
                        {
                            ticTacToeGame.TryMakeMove(x, y, isCross);
                            StateHasChanged();
                        }
                    });
                });
            }
        }
        else
        {
            navManager.NavigateTo("/", true);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null && currentLobby != null)
        {
            isOpened = false;
            await hubConnection.SendAsync("CloseLobby", currentLobby);
            preloaded = false;
            currentLobby = null;
        }
    }
    private async Task MakeGameMove(MouseEventArgs e, int x, int y)
    {
        if (gameState == GameState.Started)
            if (ticTacToeGame.IsCrossToMove)
            {
                if (ticTacToeGame.TryMakeMove(x, y, true))
                {
                    await hubConnection.SendAsync("MakeMove", currentLobby.Id, x, y, true);
                    Console.WriteLine("moved");
                }
            }
    }
}

