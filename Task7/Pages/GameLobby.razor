@page "/game-lobby"
@inject NavigationManager navManager
@implements IAsyncDisposable

<div class="pixelPageBack">
    <div style="background:radial-gradient(circle, rgba(0,212,255,0) 10%, rgba(255,255,255,0.6) 100%); height:100%" class="p-5 pt-3">
        <PageTitle>Games lobby</PageTitle>
        <h2 class="pixelTextMain text-center mt-4">Game lobbies</h2>
        <AuthorizeView>
            <Authorized>
                <h5 class="pixelTextMain m-4 position-absolute top-0 start-0">Kon ni chi ha, @user.Username</h5>
                <div class="d-flex flex-wrap">
                    <div class="box blue-box m-3" style="width:250px">
                        <p class="pixelText m-2 mb-0 mt-3 text-center" style="font-size:14px">New Lobby</p>
                        <p class="pixelText mx-2 mb-0 mt-1" style="font-size:12px">Game type</p>
                        <div class="w-100 px-2 mt-1">
                            <select class="pixelSelect">
                                <option>@EnumHelper.GetDisplayName(GameType.TicTacToe)</option>
                                <option>@EnumHelper.GetDisplayName(GameType.BiggerTicTacToe)</option>
                                <option>@EnumHelper.GetDisplayName(GameType.FindPair)</option>
                            </select>
                        </div>
                        <div class="w-100 p-2 mt-3 d-flex justify-content-center">
                            <button class="pixel google px-3"><p>Create</p></button>
                        </div>
                    </div>
                    @foreach (var lobby in awailableLobbies)
                    {
                        var imgPath = lobby.Game == GameType.TicTacToe ? "css/images/background1.jpg" : "css/images/background2.jpg";
                        <div class="box box-button blue-box m-3 " style="width:250px">
                            <img class="box-img" src="@imgPath" />
                            <p class="pixelText m-2 mb-0" style="font-size:12px">@lobby.Game</p>
                            <p class="pixelText mx-2" style="font-size:12px">Owner: <font color="@lobby.Owner.ChatColor">@lobby.Owner.Username</font></p>
                        </div>
                    }
                </div>

                <div class="position-fixed fixed-bottom">
                    <div class="position-absolute top-0 start-100 translate-middle sm-box bright-blue-box bg-white align-items-center" style="width:150px; z-index:100; margin-left:-100px;margin-top:10px">
                        <p class="pixelTextMain m-2 mw-1" style="font-size:10px;">Online: <font color="darkcyan">@chat.CurrentOnline</font></p>
                    </div>
                    <div class="box blue-box m-5 mt-0 px-5 py-4 d-flex flex-column z-1">
                        <div class="d-flex flex-column my-1" style="height:200px;overflow-y:scroll; overflow-x:hidden">
                            @foreach (var msg in chat.Messages)
                            {
                                <div class="d-flex">
                                    <p class="pixelText p-0 m-0" style="color:@msg.SenderColor">@msg.Sender: </p>
                                    <p class="pixelText p-0 m-0" style="word-wrap: normal;width:auto">@msg.Message</p>
                                </div>
                            }
                        </div>
                        <div class="d-flex justify-content-around mb-4">
                            <input maxlength="120" type="text" class="pixelInput" style="width:85%" placeholder="Input message" @bind="chat.CurrentMessage" @onkeyup="HandleInput" />
                            <button class="pixel chatConf px-3" @onclick="SendMessageAsync"><p>Send Message</p></button>
                        </div>
                    </div>
                </div>

            </Authorized>
            <NotAuthorized>
                <h1 class="position-absolute top-50 start-50 translate-middle pixelTextMain">You should not be here...</h1>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private HubConnection? hubConnection;
    public List<GameLobbyModel> awailableLobbies;
    private UserConnection user;
    public ChatModel chat;


    protected override async Task OnInitializedAsync()
    {
        chat = new ChatModel();
        awailableLobbies = new List<GameLobbyModel>();


        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            user = new UserConnection()
                {
                    Username = authState.User.Identity.Name,
                };
            await Connect();
        }
        awailableLobbies.Add(new GameLobbyModel()
            {
                Owner = user,
                Game = GameType.TicTacToe,
            });
        awailableLobbies.Add(new GameLobbyModel()
            {
                Owner = user,
                Game = GameType.BiggerTicTacToe,
            });
    }

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(navManager.ToAbsoluteUri("/gameshub"))
        .Build();

        hubConnection.On<GameLobbyModel>("GetHub", (gameLobby) =>
        {
            awailableLobbies.Add(gameLobby);
            StateHasChanged();
        });

        hubConnection.On<MessageModel>("GetLobbyMessage", (message) =>
        {
            InvokeAsync(() =>
            {
                chat.AppendMessage(message);
                StateHasChanged();
            });
        });

        hubConnection.On<int>("GetCurrentOnline", (currrentOnline) =>
        {
            InvokeAsync(() =>
            {
                chat.CurrentOnline = currrentOnline;
                StateHasChanged();
            });
        });

        await hubConnection.StartAsync();

    }

    public async Task SendMessageAsync()
    {
        if (hubConnection == null)
            return;
        if (string.IsNullOrEmpty(chat.CurrentMessage))
            return;

        await hubConnection.SendAsync("SendLobbyMessage", new MessageModel() { Sender = user.Username, SenderColor = user.ChatColor, Message = chat.CurrentMessage });
        chat.CurrentMessage = string.Empty;
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Enter"))
        {
            await SendMessageAsync();
        };
    }
}
