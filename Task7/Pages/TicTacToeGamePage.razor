@page "/game-lobby/tic-tac-toe_/{id}"
@inject NavigationManager navManager
@implements IAsyncDisposable
@inject IJSRuntime jsRuntime

<div class="pixelPageBack">
    <div style="background:radial-gradient(circle, rgba(0,212,255,0) 10%, rgba(255,255,255,0.6) 100%); height:100%" class="p-5 pt-3">
        <PageTitle>Games lobby</PageTitle>
        <AuthorizeView>
            <Authorized>
                @if (currentLobby != null)
                {
                    <p>@currentLobby.Id</p>
                    <p>@currentLobby.Game</p>
                    <p>@currentLobby.Owner.Username</p>
                    <p>@currentLobby.Owner.Id</p>
                    <p>@currentLobby.Opponent.Username</p>
                    <p>@currentLobby.GameState</p>
                }
                else
                {
                    <h2 class="pixelTextMain text-center mt-4">Lobby already full!</h2>
                }
            </Authorized>
            <NotAuthorized>
                <h2 class="pixelTextMain text-center mt-4">How da hell u got here?</h2>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Inject] HubConnection? hubConnection { get; set; }

    private GameLobbyModel currentLobby;
    private UserConnection user;
    public ChatModel chat;

    private bool isOpened = true;
    private static bool preloaded = true;

    protected override async Task OnInitializedAsync()
    {
        chat = new ChatModel();
        preloaded = true;
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            user = new UserConnection(authState.User.Claims.First(x => x.Type == ClaimTypes.UserData).Value)
                {
                    Username = authState.User.Identity.Name,
                };
            if (hubConnection != null)
            {

                //подключение, создание, отключение
                hubConnection.On<GameLobbyModel>("RecieveLobbyDataResponse", async (lobby) =>
                {
                    await InvokeAsync(() =>
                    {
                        Console.WriteLine("data");
                        currentLobby = lobby;
                        StateHasChanged();
                    });
                });
                hubConnection.On<GameLobbyModel>("LobbyJustClosed", async (lobby) =>
                {
                    if (currentLobby != null)
                    {
                        if (lobby.Id == currentLobby.Id)
                        {
                            if (preloaded)
                            {
                                await jsRuntime.InvokeVoidAsync("alert", "OppLeft");
                                preloaded = false;
                            }
                            navManager.NavigateTo("/game-lobby");
                        }
                    }
                });


                await hubConnection.SendAsync("ConnectToLobby", Id, user);
            }
        }
        else
        {
            navManager.NavigateTo("/", true);
        }
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null && currentLobby!=null)
        {
            await hubConnection.SendAsync("CloseLobby", currentLobby);
            preloaded = false;
            currentLobby = null;
        }
    }
}

