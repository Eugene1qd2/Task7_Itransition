@page "/"

@inject UserConnectionService userConnService
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="pixelPageBackIndex">
    <div style="background:radial-gradient(circle, rgba(0,212,255,0) 10%, rgba(255,255,255,0.6) 100%); height:100%">
        <div class="container">
            <div class="position-absolute top-50 start-50 translate-middle p-5 box blue-box">
                <div class="mb-3 text-center">
                    <h3 class="pixelTextMain">Join the space</h3>
                </div>
                <div style="width:20rem" class="container align-items-center py-3">
                    <div class="mb-4">
                        <input @bind="model.Username" class="m-0 pixelInput" placeholder="Username" @onkeyup="HandleInput" />
                    </div>
                    <div class="mb-3 d-grid gap-2">
                        <button @onclick="Authenticate" class="pixel google"><p>Confirm</p></button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private class Model
    {
        public string Username { get; set; }
    }

    private Model model = new Model();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        if (authState.User.Identity.IsAuthenticated)
            navManager.NavigateTo("/game-lobby", true);
    }

    private async Task Authenticate()
    {
        if (model.Username == null || model.Username.Length < 4)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Username must be 4 characters at least!");
            return;
        }

        var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = model.Username,
                Id = Guid.NewGuid().ToString()
            });
        navManager.NavigateTo("/game-lobby", true);
    }
    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key.Equals("Enter"))
        {
            await Authenticate();
        };
    }
}